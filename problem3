1. Static allocation is much less error-prone, especially to new programmers, since you do not have to worry about memory allocation and deallocation, and the “dangling pointer” issue that can arise if not careful. Also just like static-type-checkin that the compiler does, the compiler creates and sets aside the appropriate size for that data structure in the run-time stack.

2. Thinking about the design idea of C++, dynamics allow us to expand and reduce the memory allocation as we see fit thus optimizing performance/memory. Some data structures, or programs that you create, there is no way to know how much space or storage you would need to store that item. One example is the string. I would not know how much i’d need to allocate since the string can one word or hundreds of words long. This is where dynamic allocation can help. By creating the pointer that would refer to the heap, I can more easily change the original variable and what it’s holding by just changing what’s in the “box” that the pointer is connected to.

3. At this level and knowledge that I have, I would rather work with static allocation for start, since I do not have to worry about potential memory leaks.
